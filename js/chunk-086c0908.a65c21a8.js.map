{"version":3,"sources":["webpack:///./src/views/MovieDetail.vue?2965","webpack:///src/views/MovieDetail.vue","webpack:///./src/views/MovieDetail.vue?e8af","webpack:///./src/views/MovieDetail.vue?7ff4","webpack:///./src/views/MovieDetail.vue?faa9","webpack:///./node_modules/numeral/numeral.js"],"names":["render","_vm","this","_h","$createElement","_c","_self","staticClass","responseStatus","_v","_e","attrs","row","wrap","xs12","sm12","md6","offset-sm3","offset-md0","src","details","alt","sm6","_s","original_title","_l","genre","index","key","name","normalizeBudget","runtime","popularity","overview","movie","id","staticRenderFns","MovieDetailvue_type_script_lang_js_","data","movieId","$route","params","recomendations","genres","components","MovieBlock","computed","numeral_default","budget","format","methods","loadDetailes","_this","movie_service","getMovieById","then","res","console","log","loadRecomendations","catch","err","_this2","getRecomandations","results","mounted","views_MovieDetailvue_type_script_lang_js_","component","Object","componentNormalizer","__webpack_exports__","installComponents_default","VContainer","VFlex","VLayout","_node_modules_mini_css_extract_plugin_dist_loader_js_ref_6_oneOf_1_0_node_modules_css_loader_index_js_ref_6_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_oneOf_1_2_node_modules_vuetify_loader_lib_loader_js_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_MovieDetail_vue_vue_type_style_index_0_lang_css___WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","_node_modules_mini_css_extract_plugin_dist_loader_js_ref_6_oneOf_1_0_node_modules_css_loader_index_js_ref_6_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_oneOf_1_2_node_modules_vuetify_loader_lib_loader_js_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_MovieDetail_vue_vue_type_style_index_0_lang_css___WEBPACK_IMPORTED_MODULE_0___default","n","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_RESULT__","global","factory","call","exports","module","undefined","numeral","_","VERSION","formats","locales","defaults","currentLocale","zeroFormat","nullFormat","defaultFormat","scalePercentBy100","options","Numeral","input","number","_input","_value","value","kind","unformatFunction","regexp","isNumeral","isNaN","replace","length","regexps","unformat","match","stringToNumber","Number","version","obj","numberToFormat","roundingFunction","abbrForce","abs","int","precision","signed","thousands","output","locale","negP","optDec","leadingCount","abbr","trillion","billion","million","thousand","decimal","neg","Math","includes","indexOf","RegExp","abbreviations","toString","split","toFixed","delimiters","slice","String","i","string","abbreviation","stringOriginal","currency","symbol","pow","min","search","insert","subString","start","reduce","array","callback","TypeError","t","len","k","arguments","multiplier","x","parts","correctionFactor","args","Array","prototype","accum","next","mn","maxDecimals","optionals","boundedPrecision","optionalsRegExp","power","splitValue","minDecimals","max","toLowerCase","localeData","Error","reset","property","register","type","validate","val","culture","_decimalSep","_thousandSep","_currSymbol","_valArray","_abbrObj","_thousandRegEx","temp","warn","trim","e","substr","fn","clone","inputString","formatFunction","round","set","add","corrFactor","cback","curr","currI","O","subtract","multiply","divide","difference","ordinal","b","space","splice","join","base","suffixes","binary","allSuffixes","concat","filter","item","unformatRegex","bytes","suffix","bytesMultiplier","symbols","before","after","exponential","toExponential","num","hours","floor","minutes","seconds","timeArray"],"mappings":"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","file":"js/chunk-086c0908.a65c21a8.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"movie-details\"},[(_vm.responseStatus === 'loading')?[_c('h1',[_vm._v(\"Loading\")])]:_vm._e(),_c('v-container',{staticClass:\"mt-3\"},[_c('v-layout',{attrs:{\"row\":\"\",\"wrap\":\"\"}},[_c('v-flex',{attrs:{\"xs12\":\"\",\"sm12\":\"\",\"md6\":\"\",\"offset-sm3\":\"\",\"offset-md0\":\"\"}},[_c('img',{attrs:{\"src\":(\"http://image.tmdb.org/t/p/w400/\" + (_vm.details.poster_path)),\"alt\":\"Poster\"}})]),_c('v-flex',{attrs:{\"xs12\":\"\",\"sm6\":\"\",\"md6\":\"\",\"offset-sm3\":\"\",\"offset-md0\":\"\"}},[_c('h1',[_vm._v(_vm._s(_vm.details.original_title))]),_c('div',{staticClass:\"grey--text\"},_vm._l((_vm.details.genres),function(genre,index){return _c('span',{key:index,staticClass:\"mr-3\"},[_vm._v(_vm._s(genre.name))])}),0),_c('ul',{staticClass:\"info-list mt-3\"},[_c('li',{staticClass:\"mt-1\"},[_vm._v(\"Budget: \"+_vm._s(_vm.normalizeBudget))]),_c('li',{staticClass:\"mt-1\"},[_vm._v(\"Runtime: \"+_vm._s(_vm.details.runtime)+\" min\")]),_c('li',{staticClass:\"mt-1\"},[_vm._v(\"Popularity: \"+_vm._s(_vm.details.popularity)+\"m\")])]),_c('div',{staticClass:\"mt-3 movie-overview\"},[_c('h2',[_vm._v(\"Overview\")]),_c('p',[_vm._v(_vm._s(_vm.details.overview))])])])],1),_c('v-layout',{staticClass:\"mt-5\",attrs:{\"row\":\"\",\"wrap\":\"\"}},[_c('v-flex',{attrs:{\"sm12\":\"\",\"xs12\":\"\"}},[_c('h2',{staticClass:\"mb-3\"},[_vm._v(\"Recommendations\")])]),_vm._l((_vm.recomendations),function(movie){return _c('movie-block',{key:movie.id,attrs:{\"movie\":movie}})})],2)],1)],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <div class=\"movie-details\">\n    <template v-if=\"responseStatus === 'loading'\">\n      <h1>Loading</h1>\n    </template>\n    <v-container class=\"mt-3\">\n      <v-layout row wrap>\n        <v-flex xs12 sm12 md6 offset-sm3 offset-md0>\n         <img :src=\"`http://image.tmdb.org/t/p/w400/${details.poster_path}`\" alt=\"Poster\">\n        </v-flex>\n        <v-flex xs12 sm6 md6 offset-sm3 offset-md0>\n          <h1>{{ details.original_title }}</h1>\n          <div class=\"grey--text\">\n            <span v-for=\"(genre, index) in details.genres\" :key=\"index\" class=\"mr-3\">{{ genre.name }}</span>\n          </div>\n          <ul class=\"info-list mt-3\">\n            <li class=\"mt-1\">Budget: {{ normalizeBudget }}</li>\n            <li class=\"mt-1\">Runtime: {{ details.runtime }} min</li>\n            <li class=\"mt-1\">Popularity: {{ details.popularity }}m</li>\n          </ul>\n          <div class=\"mt-3 movie-overview\">\n            <h2>Overview</h2>\n            <p>{{ details.overview }}</p>\n          </div>\n        </v-flex>\n      </v-layout>\n\n      <v-layout row wrap class=\"mt-5\">\n        <v-flex sm12 xs12>\n          <h2 class=\"mb-3\">Recommendations</h2>\n        </v-flex>\n        <movie-block v-for=\"movie in recomendations\" :key=\"movie.id\" :movie=\"movie\" />\n      </v-layout>\n    </v-container>\n    \n  </div>\n</template>\n\n<script>\nimport movieService from '@/services/movie.service'\nimport MovieBlock from '@/components/MovieBlock'\nimport numeral from 'numeral'\n\nexport default {\n  name: 'movie-detail',\n  data() {\n    return {\n      movieId: this.$route.params.movieId,\n      details: {},\n      responseStatus: 'clean',\n      recomendations: [],\n      genres: []\n    }\n  },\n  components: {\n    MovieBlock\n  },\n  computed: {\n    normalizeBudget() {\n      return numeral(this.details.budget).format('0.0a')\n    }\n  },\n  methods: {\n    loadDetailes() {\n      this.responseStatus = 'loading'\n      movieService.getMovieById(this.movieId)\n      .then(res => {\n        this.details = res\n        console.log(res)\n        this.responseStatus = 'sucess'\n        this.loadRecomendations()\n        console.log(this.details)\n      })\n      .catch(err => {\n          console.log(err)\n          this.responseStatus = 'error'\n        })\n    },\n    loadRecomendations() {\n      movieService.getRecomandations(this.movieId)\n      .then(res => {\n        this.recomendations = res.results\n      })\n    },\n  },\n  mounted() {\n    this.loadDetailes()\n  }\n}\n</script>\n\n<style>\n.info-list {\n  list-style-type: none;\n  padding: 0;\n}\n</style>\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/vuetify-loader/lib/loader.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./MovieDetail.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/vuetify-loader/lib/loader.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./MovieDetail.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./MovieDetail.vue?vue&type=template&id=a114fe92&\"\nimport script from \"./MovieDetail.vue?vue&type=script&lang=js&\"\nexport * from \"./MovieDetail.vue?vue&type=script&lang=js&\"\nimport style0 from \"./MovieDetail.vue?vue&type=style&index=0&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports\n\n/* vuetify-loader */\nimport installComponents from \"!/Users/assanali/Desktop/ /Study/vuejs/vue testovoe/vue-cinema/node_modules/vuetify-loader/lib/runtime/installComponents.js\"\nimport { VContainer } from 'vuetify/lib'\nimport { VFlex } from 'vuetify/lib'\nimport { VLayout } from 'vuetify/lib'\ninstallComponents(component, {VContainer,VFlex,VLayout})\n","import mod from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/index.js??ref--6-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/vuetify-loader/lib/loader.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./MovieDetail.vue?vue&type=style&index=0&lang=css&\"; export default mod; export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/index.js??ref--6-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/vuetify-loader/lib/loader.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./MovieDetail.vue?vue&type=style&index=0&lang=css&\"","/*! @preserve\n * numeral.js\n * version : 2.0.6\n * author : Adam Draper\n * license : MIT\n * http://adamwdraper.github.com/Numeral-js/\n */\n\n(function (global, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define(factory);\n    } else if (typeof module === 'object' && module.exports) {\n        module.exports = factory();\n    } else {\n        global.numeral = factory();\n    }\n}(this, function () {\n    /************************************\n        Variables\n    ************************************/\n\n    var numeral,\n        _,\n        VERSION = '2.0.6',\n        formats = {},\n        locales = {},\n        defaults = {\n            currentLocale: 'en',\n            zeroFormat: null,\n            nullFormat: null,\n            defaultFormat: '0,0',\n            scalePercentBy100: true\n        },\n        options = {\n            currentLocale: defaults.currentLocale,\n            zeroFormat: defaults.zeroFormat,\n            nullFormat: defaults.nullFormat,\n            defaultFormat: defaults.defaultFormat,\n            scalePercentBy100: defaults.scalePercentBy100\n        };\n\n\n    /************************************\n        Constructors\n    ************************************/\n\n    // Numeral prototype object\n    function Numeral(input, number) {\n        this._input = input;\n\n        this._value = number;\n    }\n\n    numeral = function(input) {\n        var value,\n            kind,\n            unformatFunction,\n            regexp;\n\n        if (numeral.isNumeral(input)) {\n            value = input.value();\n        } else if (input === 0 || typeof input === 'undefined') {\n            value = 0;\n        } else if (input === null || _.isNaN(input)) {\n            value = null;\n        } else if (typeof input === 'string') {\n            if (options.zeroFormat && input === options.zeroFormat) {\n                value = 0;\n            } else if (options.nullFormat && input === options.nullFormat || !input.replace(/[^0-9]+/g, '').length) {\n                value = null;\n            } else {\n                for (kind in formats) {\n                    regexp = typeof formats[kind].regexps.unformat === 'function' ? formats[kind].regexps.unformat() : formats[kind].regexps.unformat;\n\n                    if (regexp && input.match(regexp)) {\n                        unformatFunction = formats[kind].unformat;\n\n                        break;\n                    }\n                }\n\n                unformatFunction = unformatFunction || numeral._.stringToNumber;\n\n                value = unformatFunction(input);\n            }\n        } else {\n            value = Number(input)|| null;\n        }\n\n        return new Numeral(input, value);\n    };\n\n    // version number\n    numeral.version = VERSION;\n\n    // compare numeral object\n    numeral.isNumeral = function(obj) {\n        return obj instanceof Numeral;\n    };\n\n    // helper functions\n    numeral._ = _ = {\n        // formats numbers separators, decimals places, signs, abbreviations\n        numberToFormat: function(value, format, roundingFunction) {\n            var locale = locales[numeral.options.currentLocale],\n                negP = false,\n                optDec = false,\n                leadingCount = 0,\n                abbr = '',\n                trillion = 1000000000000,\n                billion = 1000000000,\n                million = 1000000,\n                thousand = 1000,\n                decimal = '',\n                neg = false,\n                abbrForce, // force abbreviation\n                abs,\n                min,\n                max,\n                power,\n                int,\n                precision,\n                signed,\n                thousands,\n                output;\n\n            // make sure we never format a null value\n            value = value || 0;\n\n            abs = Math.abs(value);\n\n            // see if we should use parentheses for negative number or if we should prefix with a sign\n            // if both are present we default to parentheses\n            if (numeral._.includes(format, '(')) {\n                negP = true;\n                format = format.replace(/[\\(|\\)]/g, '');\n            } else if (numeral._.includes(format, '+') || numeral._.includes(format, '-')) {\n                signed = numeral._.includes(format, '+') ? format.indexOf('+') : value < 0 ? format.indexOf('-') : -1;\n                format = format.replace(/[\\+|\\-]/g, '');\n            }\n\n            // see if abbreviation is wanted\n            if (numeral._.includes(format, 'a')) {\n                abbrForce = format.match(/a(k|m|b|t)?/);\n\n                abbrForce = abbrForce ? abbrForce[1] : false;\n\n                // check for space before abbreviation\n                if (numeral._.includes(format, ' a')) {\n                    abbr = ' ';\n                }\n\n                format = format.replace(new RegExp(abbr + 'a[kmbt]?'), '');\n\n                if (abs >= trillion && !abbrForce || abbrForce === 't') {\n                    // trillion\n                    abbr += locale.abbreviations.trillion;\n                    value = value / trillion;\n                } else if (abs < trillion && abs >= billion && !abbrForce || abbrForce === 'b') {\n                    // billion\n                    abbr += locale.abbreviations.billion;\n                    value = value / billion;\n                } else if (abs < billion && abs >= million && !abbrForce || abbrForce === 'm') {\n                    // million\n                    abbr += locale.abbreviations.million;\n                    value = value / million;\n                } else if (abs < million && abs >= thousand && !abbrForce || abbrForce === 'k') {\n                    // thousand\n                    abbr += locale.abbreviations.thousand;\n                    value = value / thousand;\n                }\n            }\n\n            // check for optional decimals\n            if (numeral._.includes(format, '[.]')) {\n                optDec = true;\n                format = format.replace('[.]', '.');\n            }\n\n            // break number and format\n            int = value.toString().split('.')[0];\n            precision = format.split('.')[1];\n            thousands = format.indexOf(',');\n            leadingCount = (format.split('.')[0].split(',')[0].match(/0/g) || []).length;\n\n            if (precision) {\n                if (numeral._.includes(precision, '[')) {\n                    precision = precision.replace(']', '');\n                    precision = precision.split('[');\n                    decimal = numeral._.toFixed(value, (precision[0].length + precision[1].length), roundingFunction, precision[1].length);\n                } else {\n                    decimal = numeral._.toFixed(value, precision.length, roundingFunction);\n                }\n\n                int = decimal.split('.')[0];\n\n                if (numeral._.includes(decimal, '.')) {\n                    decimal = locale.delimiters.decimal + decimal.split('.')[1];\n                } else {\n                    decimal = '';\n                }\n\n                if (optDec && Number(decimal.slice(1)) === 0) {\n                    decimal = '';\n                }\n            } else {\n                int = numeral._.toFixed(value, 0, roundingFunction);\n            }\n\n            // check abbreviation again after rounding\n            if (abbr && !abbrForce && Number(int) >= 1000 && abbr !== locale.abbreviations.trillion) {\n                int = String(Number(int) / 1000);\n\n                switch (abbr) {\n                    case locale.abbreviations.thousand:\n                        abbr = locale.abbreviations.million;\n                        break;\n                    case locale.abbreviations.million:\n                        abbr = locale.abbreviations.billion;\n                        break;\n                    case locale.abbreviations.billion:\n                        abbr = locale.abbreviations.trillion;\n                        break;\n                }\n            }\n\n\n            // format number\n            if (numeral._.includes(int, '-')) {\n                int = int.slice(1);\n                neg = true;\n            }\n\n            if (int.length < leadingCount) {\n                for (var i = leadingCount - int.length; i > 0; i--) {\n                    int = '0' + int;\n                }\n            }\n\n            if (thousands > -1) {\n                int = int.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1' + locale.delimiters.thousands);\n            }\n\n            if (format.indexOf('.') === 0) {\n                int = '';\n            }\n\n            output = int + decimal + (abbr ? abbr : '');\n\n            if (negP) {\n                output = (negP && neg ? '(' : '') + output + (negP && neg ? ')' : '');\n            } else {\n                if (signed >= 0) {\n                    output = signed === 0 ? (neg ? '-' : '+') + output : output + (neg ? '-' : '+');\n                } else if (neg) {\n                    output = '-' + output;\n                }\n            }\n\n            return output;\n        },\n        // unformats numbers separators, decimals places, signs, abbreviations\n        stringToNumber: function(string) {\n            var locale = locales[options.currentLocale],\n                stringOriginal = string,\n                abbreviations = {\n                    thousand: 3,\n                    million: 6,\n                    billion: 9,\n                    trillion: 12\n                },\n                abbreviation,\n                value,\n                i,\n                regexp;\n\n            if (options.zeroFormat && string === options.zeroFormat) {\n                value = 0;\n            } else if (options.nullFormat && string === options.nullFormat || !string.replace(/[^0-9]+/g, '').length) {\n                value = null;\n            } else {\n                value = 1;\n\n                if (locale.delimiters.decimal !== '.') {\n                    string = string.replace(/\\./g, '').replace(locale.delimiters.decimal, '.');\n                }\n\n                for (abbreviation in abbreviations) {\n                    regexp = new RegExp('[^a-zA-Z]' + locale.abbreviations[abbreviation] + '(?:\\\\)|(\\\\' + locale.currency.symbol + ')?(?:\\\\))?)?$');\n\n                    if (stringOriginal.match(regexp)) {\n                        value *= Math.pow(10, abbreviations[abbreviation]);\n                        break;\n                    }\n                }\n\n                // check for negative number\n                value *= (string.split('-').length + Math.min(string.split('(').length - 1, string.split(')').length - 1)) % 2 ? 1 : -1;\n\n                // remove non numbers\n                string = string.replace(/[^0-9\\.]+/g, '');\n\n                value *= Number(string);\n            }\n\n            return value;\n        },\n        isNaN: function(value) {\n            return typeof value === 'number' && isNaN(value);\n        },\n        includes: function(string, search) {\n            return string.indexOf(search) !== -1;\n        },\n        insert: function(string, subString, start) {\n            return string.slice(0, start) + subString + string.slice(start);\n        },\n        reduce: function(array, callback /*, initialValue*/) {\n            if (this === null) {\n                throw new TypeError('Array.prototype.reduce called on null or undefined');\n            }\n\n            if (typeof callback !== 'function') {\n                throw new TypeError(callback + ' is not a function');\n            }\n\n            var t = Object(array),\n                len = t.length >>> 0,\n                k = 0,\n                value;\n\n            if (arguments.length === 3) {\n                value = arguments[2];\n            } else {\n                while (k < len && !(k in t)) {\n                    k++;\n                }\n\n                if (k >= len) {\n                    throw new TypeError('Reduce of empty array with no initial value');\n                }\n\n                value = t[k++];\n            }\n            for (; k < len; k++) {\n                if (k in t) {\n                    value = callback(value, t[k], k, t);\n                }\n            }\n            return value;\n        },\n        /**\n         * Computes the multiplier necessary to make x >= 1,\n         * effectively eliminating miscalculations caused by\n         * finite precision.\n         */\n        multiplier: function (x) {\n            var parts = x.toString().split('.');\n\n            return parts.length < 2 ? 1 : Math.pow(10, parts[1].length);\n        },\n        /**\n         * Given a variable number of arguments, returns the maximum\n         * multiplier that must be used to normalize an operation involving\n         * all of them.\n         */\n        correctionFactor: function () {\n            var args = Array.prototype.slice.call(arguments);\n\n            return args.reduce(function(accum, next) {\n                var mn = _.multiplier(next);\n                return accum > mn ? accum : mn;\n            }, 1);\n        },\n        /**\n         * Implementation of toFixed() that treats floats more like decimals\n         *\n         * Fixes binary rounding issues (eg. (0.615).toFixed(2) === '0.61') that present\n         * problems for accounting- and finance-related software.\n         */\n        toFixed: function(value, maxDecimals, roundingFunction, optionals) {\n            var splitValue = value.toString().split('.'),\n                minDecimals = maxDecimals - (optionals || 0),\n                boundedPrecision,\n                optionalsRegExp,\n                power,\n                output;\n\n            // Use the smallest precision value possible to avoid errors from floating point representation\n            if (splitValue.length === 2) {\n              boundedPrecision = Math.min(Math.max(splitValue[1].length, minDecimals), maxDecimals);\n            } else {\n              boundedPrecision = minDecimals;\n            }\n\n            power = Math.pow(10, boundedPrecision);\n\n            // Multiply up by precision, round accurately, then divide and use native toFixed():\n            output = (roundingFunction(value + 'e+' + boundedPrecision) / power).toFixed(boundedPrecision);\n\n            if (optionals > maxDecimals - boundedPrecision) {\n                optionalsRegExp = new RegExp('\\\\.?0{1,' + (optionals - (maxDecimals - boundedPrecision)) + '}$');\n                output = output.replace(optionalsRegExp, '');\n            }\n\n            return output;\n        }\n    };\n\n    // avaliable options\n    numeral.options = options;\n\n    // avaliable formats\n    numeral.formats = formats;\n\n    // avaliable formats\n    numeral.locales = locales;\n\n    // This function sets the current locale.  If\n    // no arguments are passed in, it will simply return the current global\n    // locale key.\n    numeral.locale = function(key) {\n        if (key) {\n            options.currentLocale = key.toLowerCase();\n        }\n\n        return options.currentLocale;\n    };\n\n    // This function provides access to the loaded locale data.  If\n    // no arguments are passed in, it will simply return the current\n    // global locale object.\n    numeral.localeData = function(key) {\n        if (!key) {\n            return locales[options.currentLocale];\n        }\n\n        key = key.toLowerCase();\n\n        if (!locales[key]) {\n            throw new Error('Unknown locale : ' + key);\n        }\n\n        return locales[key];\n    };\n\n    numeral.reset = function() {\n        for (var property in defaults) {\n            options[property] = defaults[property];\n        }\n    };\n\n    numeral.zeroFormat = function(format) {\n        options.zeroFormat = typeof(format) === 'string' ? format : null;\n    };\n\n    numeral.nullFormat = function (format) {\n        options.nullFormat = typeof(format) === 'string' ? format : null;\n    };\n\n    numeral.defaultFormat = function(format) {\n        options.defaultFormat = typeof(format) === 'string' ? format : '0.0';\n    };\n\n    numeral.register = function(type, name, format) {\n        name = name.toLowerCase();\n\n        if (this[type + 's'][name]) {\n            throw new TypeError(name + ' ' + type + ' already registered.');\n        }\n\n        this[type + 's'][name] = format;\n\n        return format;\n    };\n\n\n    numeral.validate = function(val, culture) {\n        var _decimalSep,\n            _thousandSep,\n            _currSymbol,\n            _valArray,\n            _abbrObj,\n            _thousandRegEx,\n            localeData,\n            temp;\n\n        //coerce val to string\n        if (typeof val !== 'string') {\n            val += '';\n\n            if (console.warn) {\n                console.warn('Numeral.js: Value is not string. It has been co-erced to: ', val);\n            }\n        }\n\n        //trim whitespaces from either sides\n        val = val.trim();\n\n        //if val is just digits return true\n        if (!!val.match(/^\\d+$/)) {\n            return true;\n        }\n\n        //if val is empty return false\n        if (val === '') {\n            return false;\n        }\n\n        //get the decimal and thousands separator from numeral.localeData\n        try {\n            //check if the culture is understood by numeral. if not, default it to current locale\n            localeData = numeral.localeData(culture);\n        } catch (e) {\n            localeData = numeral.localeData(numeral.locale());\n        }\n\n        //setup the delimiters and currency symbol based on culture/locale\n        _currSymbol = localeData.currency.symbol;\n        _abbrObj = localeData.abbreviations;\n        _decimalSep = localeData.delimiters.decimal;\n        if (localeData.delimiters.thousands === '.') {\n            _thousandSep = '\\\\.';\n        } else {\n            _thousandSep = localeData.delimiters.thousands;\n        }\n\n        // validating currency symbol\n        temp = val.match(/^[^\\d]+/);\n        if (temp !== null) {\n            val = val.substr(1);\n            if (temp[0] !== _currSymbol) {\n                return false;\n            }\n        }\n\n        //validating abbreviation symbol\n        temp = val.match(/[^\\d]+$/);\n        if (temp !== null) {\n            val = val.slice(0, -1);\n            if (temp[0] !== _abbrObj.thousand && temp[0] !== _abbrObj.million && temp[0] !== _abbrObj.billion && temp[0] !== _abbrObj.trillion) {\n                return false;\n            }\n        }\n\n        _thousandRegEx = new RegExp(_thousandSep + '{2}');\n\n        if (!val.match(/[^\\d.,]/g)) {\n            _valArray = val.split(_decimalSep);\n            if (_valArray.length > 2) {\n                return false;\n            } else {\n                if (_valArray.length < 2) {\n                    return ( !! _valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx));\n                } else {\n                    if (_valArray[0].length === 1) {\n                        return ( !! _valArray[0].match(/^\\d+$/) && !_valArray[0].match(_thousandRegEx) && !! _valArray[1].match(/^\\d+$/));\n                    } else {\n                        return ( !! _valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx) && !! _valArray[1].match(/^\\d+$/));\n                    }\n                }\n            }\n        }\n\n        return false;\n    };\n\n\n    /************************************\n        Numeral Prototype\n    ************************************/\n\n    numeral.fn = Numeral.prototype = {\n        clone: function() {\n            return numeral(this);\n        },\n        format: function(inputString, roundingFunction) {\n            var value = this._value,\n                format = inputString || options.defaultFormat,\n                kind,\n                output,\n                formatFunction;\n\n            // make sure we have a roundingFunction\n            roundingFunction = roundingFunction || Math.round;\n\n            // format based on value\n            if (value === 0 && options.zeroFormat !== null) {\n                output = options.zeroFormat;\n            } else if (value === null && options.nullFormat !== null) {\n                output = options.nullFormat;\n            } else {\n                for (kind in formats) {\n                    if (format.match(formats[kind].regexps.format)) {\n                        formatFunction = formats[kind].format;\n\n                        break;\n                    }\n                }\n\n                formatFunction = formatFunction || numeral._.numberToFormat;\n\n                output = formatFunction(value, format, roundingFunction);\n            }\n\n            return output;\n        },\n        value: function() {\n            return this._value;\n        },\n        input: function() {\n            return this._input;\n        },\n        set: function(value) {\n            this._value = Number(value);\n\n            return this;\n        },\n        add: function(value) {\n            var corrFactor = _.correctionFactor.call(null, this._value, value);\n\n            function cback(accum, curr, currI, O) {\n                return accum + Math.round(corrFactor * curr);\n            }\n\n            this._value = _.reduce([this._value, value], cback, 0) / corrFactor;\n\n            return this;\n        },\n        subtract: function(value) {\n            var corrFactor = _.correctionFactor.call(null, this._value, value);\n\n            function cback(accum, curr, currI, O) {\n                return accum - Math.round(corrFactor * curr);\n            }\n\n            this._value = _.reduce([value], cback, Math.round(this._value * corrFactor)) / corrFactor;\n\n            return this;\n        },\n        multiply: function(value) {\n            function cback(accum, curr, currI, O) {\n                var corrFactor = _.correctionFactor(accum, curr);\n                return Math.round(accum * corrFactor) * Math.round(curr * corrFactor) / Math.round(corrFactor * corrFactor);\n            }\n\n            this._value = _.reduce([this._value, value], cback, 1);\n\n            return this;\n        },\n        divide: function(value) {\n            function cback(accum, curr, currI, O) {\n                var corrFactor = _.correctionFactor(accum, curr);\n                return Math.round(accum * corrFactor) / Math.round(curr * corrFactor);\n            }\n\n            this._value = _.reduce([this._value, value], cback);\n\n            return this;\n        },\n        difference: function(value) {\n            return Math.abs(numeral(this._value).subtract(value).value());\n        }\n    };\n\n    /************************************\n        Default Locale && Format\n    ************************************/\n\n    numeral.register('locale', 'en', {\n        delimiters: {\n            thousands: ',',\n            decimal: '.'\n        },\n        abbreviations: {\n            thousand: 'k',\n            million: 'm',\n            billion: 'b',\n            trillion: 't'\n        },\n        ordinal: function(number) {\n            var b = number % 10;\n            return (~~(number % 100 / 10) === 1) ? 'th' :\n                (b === 1) ? 'st' :\n                (b === 2) ? 'nd' :\n                (b === 3) ? 'rd' : 'th';\n        },\n        currency: {\n            symbol: '$'\n        }\n    });\n\n    \n\n(function() {\n        numeral.register('format', 'bps', {\n            regexps: {\n                format: /(BPS)/,\n                unformat: /(BPS)/\n            },\n            format: function(value, format, roundingFunction) {\n                var space = numeral._.includes(format, ' BPS') ? ' ' : '',\n                    output;\n\n                value = value * 10000;\n\n                // check for space before BPS\n                format = format.replace(/\\s?BPS/, '');\n\n                output = numeral._.numberToFormat(value, format, roundingFunction);\n\n                if (numeral._.includes(output, ')')) {\n                    output = output.split('');\n\n                    output.splice(-1, 0, space + 'BPS');\n\n                    output = output.join('');\n                } else {\n                    output = output + space + 'BPS';\n                }\n\n                return output;\n            },\n            unformat: function(string) {\n                return +(numeral._.stringToNumber(string) * 0.0001).toFixed(15);\n            }\n        });\n})();\n\n\n(function() {\n        var decimal = {\n            base: 1000,\n            suffixes: ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\n        },\n        binary = {\n            base: 1024,\n            suffixes: ['B', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB']\n        };\n\n    var allSuffixes =  decimal.suffixes.concat(binary.suffixes.filter(function (item) {\n            return decimal.suffixes.indexOf(item) < 0;\n        }));\n        var unformatRegex = allSuffixes.join('|');\n        // Allow support for BPS (http://www.investopedia.com/terms/b/basispoint.asp)\n        unformatRegex = '(' + unformatRegex.replace('B', 'B(?!PS)') + ')';\n\n    numeral.register('format', 'bytes', {\n        regexps: {\n            format: /([0\\s]i?b)/,\n            unformat: new RegExp(unformatRegex)\n        },\n        format: function(value, format, roundingFunction) {\n            var output,\n                bytes = numeral._.includes(format, 'ib') ? binary : decimal,\n                suffix = numeral._.includes(format, ' b') || numeral._.includes(format, ' ib') ? ' ' : '',\n                power,\n                min,\n                max;\n\n            // check for space before\n            format = format.replace(/\\s?i?b/, '');\n\n            for (power = 0; power <= bytes.suffixes.length; power++) {\n                min = Math.pow(bytes.base, power);\n                max = Math.pow(bytes.base, power + 1);\n\n                if (value === null || value === 0 || value >= min && value < max) {\n                    suffix += bytes.suffixes[power];\n\n                    if (min > 0) {\n                        value = value / min;\n                    }\n\n                    break;\n                }\n            }\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            return output + suffix;\n        },\n        unformat: function(string) {\n            var value = numeral._.stringToNumber(string),\n                power,\n                bytesMultiplier;\n\n            if (value) {\n                for (power = decimal.suffixes.length - 1; power >= 0; power--) {\n                    if (numeral._.includes(string, decimal.suffixes[power])) {\n                        bytesMultiplier = Math.pow(decimal.base, power);\n\n                        break;\n                    }\n\n                    if (numeral._.includes(string, binary.suffixes[power])) {\n                        bytesMultiplier = Math.pow(binary.base, power);\n\n                        break;\n                    }\n                }\n\n                value *= (bytesMultiplier || 1);\n            }\n\n            return value;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'currency', {\n        regexps: {\n            format: /(\\$)/\n        },\n        format: function(value, format, roundingFunction) {\n            var locale = numeral.locales[numeral.options.currentLocale],\n                symbols = {\n                    before: format.match(/^([\\+|\\-|\\(|\\s|\\$]*)/)[0],\n                    after: format.match(/([\\+|\\-|\\)|\\s|\\$]*)$/)[0]\n                },\n                output,\n                symbol,\n                i;\n\n            // strip format of spaces and $\n            format = format.replace(/\\s?\\$\\s?/, '');\n\n            // format the number\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            // update the before and after based on value\n            if (value >= 0) {\n                symbols.before = symbols.before.replace(/[\\-\\(]/, '');\n                symbols.after = symbols.after.replace(/[\\-\\)]/, '');\n            } else if (value < 0 && (!numeral._.includes(symbols.before, '-') && !numeral._.includes(symbols.before, '('))) {\n                symbols.before = '-' + symbols.before;\n            }\n\n            // loop through each before symbol\n            for (i = 0; i < symbols.before.length; i++) {\n                symbol = symbols.before[i];\n\n                switch (symbol) {\n                    case '$':\n                        output = numeral._.insert(output, locale.currency.symbol, i);\n                        break;\n                    case ' ':\n                        output = numeral._.insert(output, ' ', i + locale.currency.symbol.length - 1);\n                        break;\n                }\n            }\n\n            // loop through each after symbol\n            for (i = symbols.after.length - 1; i >= 0; i--) {\n                symbol = symbols.after[i];\n\n                switch (symbol) {\n                    case '$':\n                        output = i === symbols.after.length - 1 ? output + locale.currency.symbol : numeral._.insert(output, locale.currency.symbol, -(symbols.after.length - (1 + i)));\n                        break;\n                    case ' ':\n                        output = i === symbols.after.length - 1 ? output + ' ' : numeral._.insert(output, ' ', -(symbols.after.length - (1 + i) + locale.currency.symbol.length - 1));\n                        break;\n                }\n            }\n\n\n            return output;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'exponential', {\n        regexps: {\n            format: /(e\\+|e-)/,\n            unformat: /(e\\+|e-)/\n        },\n        format: function(value, format, roundingFunction) {\n            var output,\n                exponential = typeof value === 'number' && !numeral._.isNaN(value) ? value.toExponential() : '0e+0',\n                parts = exponential.split('e');\n\n            format = format.replace(/e[\\+|\\-]{1}0/, '');\n\n            output = numeral._.numberToFormat(Number(parts[0]), format, roundingFunction);\n\n            return output + 'e' + parts[1];\n        },\n        unformat: function(string) {\n            var parts = numeral._.includes(string, 'e+') ? string.split('e+') : string.split('e-'),\n                value = Number(parts[0]),\n                power = Number(parts[1]);\n\n            power = numeral._.includes(string, 'e-') ? power *= -1 : power;\n\n            function cback(accum, curr, currI, O) {\n                var corrFactor = numeral._.correctionFactor(accum, curr),\n                    num = (accum * corrFactor) * (curr * corrFactor) / (corrFactor * corrFactor);\n                return num;\n            }\n\n            return numeral._.reduce([value, Math.pow(10, power)], cback, 1);\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'ordinal', {\n        regexps: {\n            format: /(o)/\n        },\n        format: function(value, format, roundingFunction) {\n            var locale = numeral.locales[numeral.options.currentLocale],\n                output,\n                ordinal = numeral._.includes(format, ' o') ? ' ' : '';\n\n            // check for space before\n            format = format.replace(/\\s?o/, '');\n\n            ordinal += locale.ordinal(value);\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            return output + ordinal;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'percentage', {\n        regexps: {\n            format: /(%)/,\n            unformat: /(%)/\n        },\n        format: function(value, format, roundingFunction) {\n            var space = numeral._.includes(format, ' %') ? ' ' : '',\n                output;\n\n            if (numeral.options.scalePercentBy100) {\n                value = value * 100;\n            }\n\n            // check for space before %\n            format = format.replace(/\\s?\\%/, '');\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            if (numeral._.includes(output, ')')) {\n                output = output.split('');\n\n                output.splice(-1, 0, space + '%');\n\n                output = output.join('');\n            } else {\n                output = output + space + '%';\n            }\n\n            return output;\n        },\n        unformat: function(string) {\n            var number = numeral._.stringToNumber(string);\n            if (numeral.options.scalePercentBy100) {\n                return number * 0.01;\n            }\n            return number;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'time', {\n        regexps: {\n            format: /(:)/,\n            unformat: /(:)/\n        },\n        format: function(value, format, roundingFunction) {\n            var hours = Math.floor(value / 60 / 60),\n                minutes = Math.floor((value - (hours * 60 * 60)) / 60),\n                seconds = Math.round(value - (hours * 60 * 60) - (minutes * 60));\n\n            return hours + ':' + (minutes < 10 ? '0' + minutes : minutes) + ':' + (seconds < 10 ? '0' + seconds : seconds);\n        },\n        unformat: function(string) {\n            var timeArray = string.split(':'),\n                seconds = 0;\n\n            // turn hours and minutes into seconds and add them all up\n            if (timeArray.length === 3) {\n                // hours\n                seconds = seconds + (Number(timeArray[0]) * 60 * 60);\n                // minutes\n                seconds = seconds + (Number(timeArray[1]) * 60);\n                // seconds\n                seconds = seconds + Number(timeArray[2]);\n            } else if (timeArray.length === 2) {\n                // minutes\n                seconds = seconds + (Number(timeArray[0]) * 60);\n                // seconds\n                seconds = seconds + Number(timeArray[1]);\n            }\n            return Number(seconds);\n        }\n    });\n})();\n\nreturn numeral;\n}));\n"],"sourceRoot":""}